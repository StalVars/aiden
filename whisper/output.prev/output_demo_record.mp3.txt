Filename : demo_record.mp3
=======================================================
Time taken for tiny: 35.21726417541504
tiny:  and I take up today and I want to make sure that you're actually still there. So thank you. Okay, so let's talk through the code a little bit. And if any questions arise, let's talk about them. So just as a reminder, what we did last time, but very very small neural network, that takes it puts xx those are vectors of size 2, and then it applies, it multiplies some weight matrix wlx2 by 2 matrix with x, that gives me a 2 bar 2 vector of legs 2. I will run this through the signoid function, which is this nonlinear function here, that again gives the e-evector of size 2, and then i multiply that with a 1 bar 2 matrix being, that will give me a 1' vector of length one y, And I just read that it's the single float out there. That's your blackbar. And so if you apply this new blackbar to an import, you'll check this xx1, which is the vector.
---------------------------------------
Time taken for base: 11.83619737625122
base:  and I take up today and I want to make sure that you're actually still there. So thank you. Okay, so let's talk through the code a little bit. And if any questions arise, let's talk about them. So just as a reminder, what we did last time, a very, very small neural network that takes inputs, xx, those are vectors of size two. And then it applies, it multiplies some weight matrix W, which is 2 by 2 matrix with X, that gives me a 2 by 2, a vector of length 2. I will run this through the sigmoid function, which is this nonlinear function here, that again gives me a vector of size 2. And then in the end, I multiply that with a 1 by 2 matrix V, that will give me a 1 by 1, well, a vector of length 1, Y. And I just read that it's the sigmo float out that it has. So that's the neural network. And so if you apply this neural network to an input, let's affect this xx1, which is a vector.
---------------------------------------
Time taken for small: 16.66059422492981
small:  and I take ups today and I want to make sure that you're actually still there. So thank you. Okay, so let's talk through the code a little bit. And if any questions arise, let's talk about them. So just as a reminder, what we did last. Very, very small neural network that takes inputs xx. Those are vectors of size two. And then it applies, it multiplies some weight matrix W, which is a two by two matrix with X, that gives me a vector of length two. I will run this through the signoid function, which is this non-linear function here, that again gives me a vector of size two. And then in the end, I multiply that with a one by two matrix V, that will give me a one by one, well, a vector of length one, Y, and I just reach that it's the single float out that it has in it, right? So that's the neural network. And so if you apply this neural network to an input, you can project this xx one, which is a vector.
---------------------------------------
Time taken for medium: 27.91891312599182
medium:  and at HICUPS today and I want to make sure that you're actually still there. So, thank you. Okay. So, let's talk through the code a little bit and if any questions arise, let's talk about them. So, just as a reminder, what we did last time, a very, very small neural network that takes inputs xx, those are vectors of size 2 and then it applies, it multiplies some weight matrix W which is a 2 by 2 matrix with X that gives me a 2 by 2, a vector of length 2. I will run this through the sigmoid function which is this nonlinear function here that again gives me a vector of size 2 and then in the end I multiply that with a 1 by 2 matrix V that will give me a 1 by 1, well a vector of length 1, Y and I just need to meet that it's the single float out that it has in it, right? So, that's the neural network and so if you apply this neural network to an input like this xx1 which is a vector
---------------------------------------
Time taken for medium: 46.53452014923096
large: and I take ups today. And I want to make sure that you're actually still there. So thank you. OK, so let's talk through the code a little bit. And if any questions arise, let's talk about them. So just as a reminder, what we did last time is a very, very small neural network that takes inputs, xx. Those are vectors of size 2. And then it multiplies some weight matrix, w, which is a 2 by 2 matrix with x. That gives me a vector of length 2. I will run this through the sigmoid function, which is this nonlinear function here. That, again, gives me a vector of size 2. And then in the end, I multiply that with a 1 by 2 matrix, v. That will give me a vector of length 1, y. And I just read that it's the single float out that it has in it. So that's the neural network. And so if you apply this neural network to an input like this xx1, which is the vector of length 2,

