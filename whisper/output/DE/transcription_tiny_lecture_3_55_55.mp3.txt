  Es stellt sich heraus, dass dies der Fall ist, denn die iterativwertiefende Tiefensuche kombiniert die Vorteile der Tiefensuche und der Breitensuche. Der Algorithmus ist optimal für Einheitsaktionskosten, weil er durch Wiederholtes erhöhen des Limits der Suchtiefe zuerst Lösungen minimaler Länge findet. Beachten Sie, dass es auch Erweiterungen dieses Algorithmus gibt, die optimal IT für allgemeine Aktionskosten garantieren können. Der Algorithmus ist für Suchräume mit endlichem Verzweigungsgrad vollständig, da die Suchtiefe durch das Tiefenlimit begrenzt ist und die endliche Verzweigung eine die Breite des Suchboms begrenzt. Die Zeit- und Speicherkomplexität ist die gleiche wie bei der tiefen begrenzten Suche. Vergleichen wir die Zeitkomplexität der Breitensuche und der iterativwertiefende Tiefensuche. Die Breitensuche durch sucht den Suchraum Ebene für Ebene. Sie expandiert zuerst alle Nachfolger eines Knotens auf Ebene 1, wobei es bis zu B-Nachfolger geben kann, dann alle Nachfolger von Nachfolgern und so weiter. Sie hat also eine Zeitkomplexität der Ordnung B hoch D, die iterativwertiefende Tiefensuche macht etwas ganz ähnliches, aber sie wiederholt diese Expansionen für jede neue Tiefengrenze. Der Anfangsknoten wird also demal expandiert, die nächste Ebene, also die Kinder des Anfangs zustand es, dem minus einsmal, und so weiter. Die Meistearbeit wird jedoch in der letzten Schicht geleistet, die die Größe B hoch D hat und in der der Algorithmus auf die meisten Knoten trifft. Selbst wenn also ein Großteil der Arbeit wiederholt wird, hat dies keinen Einfluss auf die Zeitkomplexität, die der Algorithmus benötigt. Wie bei der Breitensuche könnte der Algorithmus also im schlimmsten Fall Knoten der Ordnung B hoch D erzeugen. Die iterativwertiefende Tiefensuche hilft uns jedoch, die Speicherkomplexität zu kontrollieren und erlaubt es uns, Suchräume zu durchsuchen, bei denen wir nicht wissen, in welcher Tiefe wir eine Lösung finden werden. Zusätzlich ist die optimalität für Einheitsaktionskosten eine sehr attraktive Eigenschaft dieses Algorithmus. Sehen wir uns ein Beispiel für die Zeitkomplexität an, wenn der Verzweigungsfaktor B gleich 10 ist, und wir bis zu einer Tiefe von 5 suchen, bis wir eine Lösung finden. In der Tabelle sehen sie die Anzahl der Knoten, die durch diese beiden Strategien auf jeder Ebene erzeugt werden. Die Breitensuche generiert über 111.000 Knoten. Die iterativwertiefende Tiefensuche wird, obwohl sie die gesamte Arbeit auf den vorherigen Schichten mehrmals wiederholt, nur 120.000 Knoten expandieren, was nur ein wenig mehr ist als bei der Breitensuche und diesen Algorithmus sehr attraktiv macht.
