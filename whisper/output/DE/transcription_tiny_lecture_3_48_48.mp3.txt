  Lassen Sie uns die Zeit und Raumkomplexität der Tiefensuche diskutieren. Die Zeitkomplexität ist exponentiell und vergleichbar mit der breiten Suche. Hier haben wir als Exponenten allerdings M, die maximale Tiefe des Suchraums, statt die Tiefe einer Lösung, da die Tiefensuche suchen wird, bis sie im schlimmsten Fall die maximale Tiefe des Suchraums erreicht hat. Statt flache Lösungen zu finden, kann es sein, dass die Tiefensuche zuerst sehr lange Lösungen findet. Im schlimmsten Fall werden alle Knoten besucht bevor eine Lösung gefunden wird. Dies können mehr Knoten als die Anzahl zustände im Zustandsraum sein, wenn eine Baumsuche auf einem Grafen verwendet wird, da sich diese die besuchten Zustände nicht merkt und es passieren kann, dass ein Zustand mehrfach expandiert wird. Die Speicherkomplexität dagegen ist linear und von der Größe B-mal M oder nur M, also viel besser als für die breiten Suche. Je nachdem wie der Tiefensuche Algorithmus implementiert ist, brauchen wir unterschiedlich viel Speicher. Im Pseudocourt können sie sehen, dass sich der Algorithmus die Knoten entlang des aktuellen Pfades und all ihre noch nicht untersuchten Nachbarn merkt, also alle Knoten, die Kandidaten für die Expansionen sind. Wird die Tiefensuche mit einer Intelligenten Indizierung implementiert, müssen nur die Knoten entlang des aktuellen Pfades gespeichert werden? Ihre noch nicht untersuchten Nachbarn werden dynamisch auf effiziente Weise berechnet. Dies reduziert die Speicherkomplexität auf die Größe N.
